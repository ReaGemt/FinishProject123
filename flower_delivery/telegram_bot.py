import logging
import os
import sys

import django
from asgiref.sync import sync_to_async
from django.conf import settings
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler

from core.models import Product, Order, User

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞, —á—Ç–æ–±—ã Python –º–æ–≥ –Ω–∞–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'flower_delivery.settings')
django.setup()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django
TELEGRAM_BOT_TOKEN = settings.TELEGRAM_BOT_TOKEN

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def start(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("üåπ –ö–∞—Ç–∞–ª–æ–≥", callback_data='catalog'), InlineKeyboardButton("üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", callback_data='status')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help'), InlineKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='register')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Flower Delivery Bot!\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π Inline-–∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    handlers = {
        'catalog': send_catalog,
        'status': check_status,
        'help': help_command,
        'register': register_user
    }
    handler = handlers.get(query.data)
    if handler:
        await handler(update, context, from_callback=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
def setup_bot():
    try:
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(button_handler))
        application.run_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–æ—Ç–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /catalog –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
async def send_catalog(update: Update, context: CallbackContext, from_callback=False) -> None:
    try:
        chat_id = update.callback_query.message.chat_id if from_callback else update.message.chat_id
        products = await sync_to_async(list)()
        if products:
            catalog_message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç—ã:\n" + "\n".join(f"{product.name} - {product.price} —Ä—É–±." for product in products)
        else:
            catalog_message = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
        await context.bot.send_message(chat_id=chat_id, text=catalog_message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
async def check_status(update: Update, context: CallbackContext, from_callback=False) -> None:
    try:
        telegram_user = update.callback_query.from_user if from_callback else update.message.from_user
        user = await sync_to_async(User.objects.filter(username=telegram_user.username).first)()
        if user:
            orders = await sync_to_async(list)(Order.objects.filter(user=user).order_by('-created_at'))
            if orders:
                message = "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n" + "\n".join(
                    f"–ó–∞–∫–∞–∑ {order.id}: {', '.join(f'{item.product.name} x{item.quantity}' for item in order.items.all())} - –°—Ç–∞—Ç—É—Å: {order.get_status_display()}"
                    for order in orders
                )
            else:
                message = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤."
        else:
            message = "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å."
        await context.bot.send_message(chat_id=telegram_user.id, text=message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register
async def register_user(update: Update, context: CallbackContext, from_callback=False) -> None:
    try:
        telegram_user = update.callback_query.from_user if from_callback else update.message.from_user
        user, created = await sync_to_async(User.objects.get_or_create)(username=telegram_user.username)
        message = "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã." if created else "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å."
        await context.bot.send_message(chat_id=telegram_user.id, text=message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: CallbackContext, from_callback=False) -> None:
    try:
        chat_id = update.callback_query.message.chat_id if from_callback else update.message.chat_id
        await context.bot.send_message(
            chat_id=chat_id,
            text=(
                "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
                "/catalog - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ü–≤–µ—Ç–æ–≤\n"
                "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤\n"
                "/register - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ\n"
                "–ß—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
            )
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏: {e}")

if __name__ == "__main__":
    setup_bot()
