import os
import sys
import django
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞, —á—Ç–æ–±—ã Python –º–æ–≥ –Ω–∞–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'flower_delivery.settings')
django.setup()

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler, MessageHandler, filters
from core.models import Product, Order, OrderItem, User
from django.conf import settings
from asgiref.sync import sync_to_async

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django
TELEGRAM_BOT_TOKEN = settings.TELEGRAM_BOT_TOKEN

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def start(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [
            InlineKeyboardButton("üåπ –ö–∞—Ç–∞–ª–æ–≥", callback_data='catalog'),
            InlineKeyboardButton("üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", callback_data='status')
        ],
        [
            InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help'),
            InlineKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='register')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Flower Delivery Bot!\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π Inline-–∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == 'catalog':
        await send_catalog(update, context, from_callback=True)
    elif query.data == 'status':
        await check_status(update, context, from_callback=True)
    elif query.data == 'help':
        await help_command(update, context, from_callback=True)
    elif query.data == 'register':
        await register_user(update, context, from_callback=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
def setup_bot():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.run_polling()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /catalog –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
async def send_catalog(update: Update, context: CallbackContext, from_callback=False) -> None:
    if from_callback:
        chat_id = update.callback_query.message.chat_id
    else:
        chat_id = update.message.chat_id

    products = await sync_to_async(list)(Product.objects.all())  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å –ø–æ–º–æ—â—å—é sync_to_async
    if products:
        catalog_message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç—ã:\n"
        for product in products:
            catalog_message += f"{product.name} - {product.price} —Ä—É–±.\n"
        await context.bot.send_message(chat_id=chat_id, text=catalog_message)
    else:
        await context.bot.send_message(chat_id=chat_id, text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
async def check_status(update: Update, context: CallbackContext, from_callback=False) -> None:
    if from_callback:
        telegram_user = update.callback_query.from_user
    else:
        telegram_user = update.message.from_user

    user = await sync_to_async(lambda: User.objects.filter(username=telegram_user.username).first())()
    if user:
        orders = await sync_to_async(lambda: list(Order.objects.filter(user=user).order_by('-created_at')))()
        if orders:
            message = "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n"
            for order in orders:
                items = await sync_to_async(lambda: list(order.items.all()))()
                products = await sync_to_async(
                    lambda: ", ".join([f"{item.product.name} x{item.quantity}" for item in items])
                )()
                status = order.get_status_display()
                message += f"–ó–∞–∫–∞–∑ {order.id}: {products} - –°—Ç–∞—Ç—É—Å: {status}\n"
            await context.bot.send_message(chat_id=telegram_user.id, text=message)
        else:
            await context.bot.send_message(chat_id=telegram_user.id, text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
    else:
        await context.bot.send_message(
            chat_id=telegram_user.id,
            text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å."
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register
async def register_user(update: Update, context: CallbackContext, from_callback=False) -> None:
    if from_callback:
        telegram_user = update.callback_query.from_user
    else:
        telegram_user = update.message.from_user

    user, created = await sync_to_async(User.objects.get_or_create)(username=telegram_user.username)
    if created:
        await context.bot.send_message(chat_id=telegram_user.id, text="–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑—ã.")
    else:
        await context.bot.send_message(chat_id=telegram_user.id, text="–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑—ã.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: CallbackContext, from_callback=False) -> None:
    if from_callback:
        chat_id = update.callback_query.message.chat_id
    else:
        chat_id = update.message.chat_id

    await context.bot.send_message(
        chat_id=chat_id,
        text=(
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/catalog - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ü–≤–µ—Ç–æ–≤\n"
            "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤\n"
            "/register - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ\n"
            "–ß—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
        )
    )

if __name__ == "__main__":
    setup_bot()
