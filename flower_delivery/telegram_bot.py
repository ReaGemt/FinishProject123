import os
import sys
import django
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞, —á—Ç–æ–±—ã Python –º–æ–≥ –Ω–∞–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'flower_delivery.settings')
django.setup()

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackContext, CallbackQueryHandler,
    ConversationHandler, MessageHandler, filters
)
from core.models import Product, Order, OrderItem, User
from django.conf import settings
from asgiref.sync import sync_to_async

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler("bot_logs.log")
    ]
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECT_PRODUCT, SELECT_QUANTITY, ASKING_CUSTOM_QUANTITY, ASKING_ADDRESS, ORDER_CONFIRMATION = range(5)

# –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
WORKING_HOURS_START = 9
WORKING_HOURS_END = 18

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django
TELEGRAM_BOT_TOKEN = settings.TELEGRAM_BOT_TOKEN
ADMIN_TELEGRAM_CHAT_ID = os.getenv("ADMIN_TELEGRAM_CHAT_ID")
application = Application.builder().token(TELEGRAM_BOT_TOKEN).read_timeout(5).write_timeout(5).build()

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
def is_within_working_hours() -> bool:
    now = datetime.now().time()
    return WORKING_HOURS_START <= now.hour < WORKING_HOURS_END

# –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
async def send_message_with_keyboard(chat_id, text, keyboard, context):
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def start(update: Update, context: CallbackContext) -> None:
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {update.message.from_user.username}")
    keyboard = [
        [
            InlineKeyboardButton("üåπ –ö–∞—Ç–∞–ª–æ–≥", callback_data='catalog'),
            InlineKeyboardButton("üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", callback_data='status')
        ],
        [
            InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data='help'),
            InlineKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='register')
        ],
        [InlineKeyboardButton("üõç –ó–∞–∫–∞–∑–∞—Ç—å", callback_data='order')]
    ]
    if update.message.chat_id == int(ADMIN_TELEGRAM_CHAT_ID):
        keyboard.append([InlineKeyboardButton("üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏", callback_data='manage_orders')])
    await send_message_with_keyboard(
        update.message.chat_id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Flower Delivery Bot!\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:",
        keyboard,
        context
    )

async def start_order(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."""
    logger.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞.")
    query = update.callback_query
    await query.answer()

    if not is_within_working_hours():
        await query.message.reply_text(
            "–ó–∞–∫–∞–∑—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (—Å 9:00 –¥–æ 18:00).\n"
            "–ó–∞–∫–∞–∑—ã, –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–µ –≤ –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è, –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å."
        )
        return ConversationHandler.END

    products = await sync_to_async(list)(Product.objects.all())
    if products:
        keyboard = [
            [InlineKeyboardButton(product.name, callback_data=f"product_{product.id}")]
            for product in products
        ]
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –∑–∞–∫–∞–∑–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
        return SELECT_PRODUCT
    else:
        await query.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
async def handle_product_selection(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    product_id = int(query.data.split("_")[1])
    product = await sync_to_async(Product.objects.get)(id=product_id)
    context.user_data['product'] = product

    keyboard = [
        [InlineKeyboardButton("1", callback_data="quantity_1"),
         InlineKeyboardButton("5", callback_data="quantity_5"),
         InlineKeyboardButton("10", callback_data="quantity_10")],
        [InlineKeyboardButton("20", callback_data="quantity_20"),
         InlineKeyboardButton("50", callback_data="quantity_50")],
        [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä—É—á–Ω—É—é", callback_data="custom_quantity")]
    ]
    await query.edit_message_text(
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {product.name}. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SELECT_QUANTITY

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
async def handle_quantity_selection(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    quantity = int(query.data.split("_")[1])
    context.user_data['quantity'] = quantity

    product = context.user_data.get('product')
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}")

    await query.message.reply_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {product.name}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:"
    )
    return ASKING_ADDRESS

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
async def handle_custom_quantity(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:")
    return ASKING_CUSTOM_QUANTITY

async def ask_custom_quantity(update: Update, context: CallbackContext) -> int:
    try:
        quantity = int(update.message.text)
        if quantity <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        context.user_data['quantity'] = quantity

        product = context.user_data.get('product')
        await update.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {product.name}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:"
        )
        return ASKING_ADDRESS
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.")
        return ASKING_CUSTOM_QUANTITY

async def process_address_input(update: Update, context: CallbackContext) -> int:
    address = update.message.text
    context.user_data['address'] = address
    product = context.user_data.get('product')
    quantity = context.user_data.get('quantity')

    order_summary = (
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∑–∞–∫–∞–∑–∞—Ç—å {product.name} (x{quantity}).\n"
        f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:"
    )
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm_order')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_order')]
    ]
    await update.message.reply_text(order_summary, reply_markup=InlineKeyboardMarkup(keyboard))
    return ORDER_CONFIRMATION

async def confirm_order(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    product = context.user_data.get('product')
    quantity = context.user_data.get('quantity')
    address = context.user_data.get('address')

    user, _ = await sync_to_async(User.objects.get_or_create)(username=query.from_user.username)
    order = await sync_to_async(Order.objects.create)(user=user, address=address)
    await sync_to_async(OrderItem.objects.create)(order=order, product=product, quantity=quantity)

    await query.edit_message_text(text=f"–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ '{product.name}' –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {quantity} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    return ConversationHandler.END

async def cancel_order(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑.")
    await query.edit_message_text(text="–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.")
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∫–Ω–æ–ø–∫–∏: {query.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")

    if query.data == 'catalog':
        await send_catalog(update, context, from_callback=True)
    elif query.data == 'status':
        await check_status(update, context, from_callback=True)
    elif query.data == 'help':
        await help_command(update, context, from_callback=True)
    elif query.data == 'register':
        await register_user(update, context, from_callback=True)
    elif query.data == 'manage_orders':
        await manage_orders(update, context)
    elif query.data.startswith('order_'):
        await order_status_handler(update, context)
    elif query.data.startswith('status_'):
        await set_order_status(update, context)
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {query.data}")

# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def manage_orders(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user_chat_id = query.message.chat_id
    await query.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_chat_id} –∑–∞–ø—Ä–æ—Å–∏–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏.")

    if str(user_chat_id) != str(ADMIN_TELEGRAM_CHAT_ID):
        await context.bot.send_message(chat_id=user_chat_id, text="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    orders = await sync_to_async(lambda: list(Order.objects.all().order_by('-created_at')))()
    if not orders:
        await context.bot.send_message(chat_id=ADMIN_TELEGRAM_CHAT_ID, text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return

    keyboard = []
    for order in orders:
        user = await sync_to_async(lambda: order.user.username if order.user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")()
        order_text = f"–ó–∞–∫–∞–∑ {order.id}: {user} - –°—Ç–∞—Ç—É—Å: {order.get_status_display()}"
        keyboard.append([InlineKeyboardButton(order_text, callback_data=f"order_{order.id}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=ADMIN_TELEGRAM_CHAT_ID, text="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:",
                                   reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def order_status_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    user_chat_id = query.message.chat_id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_chat_id} –ø—ã—Ç–∞–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞.")

    if str(user_chat_id) != str(ADMIN_TELEGRAM_CHAT_ID):
        await context.bot.send_message(chat_id=user_chat_id, text="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    order_id = int(query.data.split("_")[1])
    order = await sync_to_async(Order.objects.get)(id=order_id)

    keyboard = [
        [InlineKeyboardButton("–í –æ–±—Ä–∞–±–æ—Ç–∫–µ", callback_data=f"status_{order.id}_processing")],
        [InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è", callback_data=f"status_{order.id}_delivering")],
        [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–µ–Ω", callback_data=f"status_{order.id}_completed")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–µ–Ω", callback_data=f"status_{order.id}_canceled")]
    ]
    await query.edit_message_text(
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.id}:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
async def set_order_status(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.message.chat_id} –ø—ã—Ç–∞–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å.")

    if str(query.message.chat_id) != str(ADMIN_TELEGRAM_CHAT_ID):
        await context.bot.send_message(chat_id=query.message.chat_id, text="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    data = query.data.split("_")
    order_id = int(data[1])
    new_status_key = data[2]

    status_mapping = {
        "processing": "pending",
        "delivering": "shipped",
        "completed": "delivered",
        "canceled": "canceled"
    }

    if new_status_key not in status_mapping:
        await context.bot.send_message(chat_id=query.message.chat_id, text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å.")
        return

    order = await sync_to_async(Order.objects.get)(id=order_id)
    order.status = status_mapping[new_status_key]
    await sync_to_async(order.save)()
    logger.info(f"–ó–∞–∫–∞–∑ {order.id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Å—Ç–∞—Ç—É—Å {order.get_status_display()}")
    await query.edit_message_text(text=f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order.id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{order.get_status_display()}'.")

# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞
async def send_catalog(update: Update, context: CallbackContext, from_callback=False) -> None:
    chat_id = update.callback_query.message.chat_id if from_callback else update.message.chat_id

    products = await sync_to_async(list)(Product.objects.all())
    if products:
        for product in products:
            product_description = f"{product.name}\n{product.description}\n–¶–µ–Ω–∞: {product.price} —Ä—É–±."

            if product.image:
                try:
                    product_image_url = f"{settings.DOMAIN_NAME}{product.image.url}"
                    await context.bot.send_photo(
                        chat_id=chat_id,
                        photo=product_image_url,
                        caption=product_description
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ URL: {e}")
                    try:
                        await context.bot.send_photo(
                            chat_id=chat_id,
                            photo=open(product.image.path, 'rb'),
                            caption=product_description
                        )
                    except Exception as local_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {local_error}")
                        await context.bot.send_message(chat_id=chat_id, text=product_description)
            else:
                await context.bot.send_message(chat_id=chat_id, text=product_description)
    else:
        await context.bot.send_message(chat_id=chat_id, text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
async def check_status(update: Update, context: CallbackContext, from_callback=False) -> None:
    chat_id = update.callback_query.message.chat_id if from_callback else update.message.chat_id
    user = await sync_to_async(lambda: User.objects.filter(username=update.effective_user.username).first())()
    if user:
        orders = await sync_to_async(lambda: list(Order.objects.filter(user=user)))()
        if orders:
            response = "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n"
            for order in orders:
                response += f"–ó–∞–∫–∞–∑ #{order.id}: –°—Ç–∞—Ç—É—Å - {order.get_status_display()}\n"
            await context.bot.send_message(chat_id=chat_id, text=response)
        else:
            await context.bot.send_message(chat_id=chat_id, text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
    else:
        await context.bot.send_message(chat_id=chat_id, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")

# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–º–æ—â–∏
async def help_command(update: Update, context: CallbackContext, from_callback=False) -> None:
    chat_id = update.callback_query.message.chat_id if from_callback else update.message.chat_id

    await context.bot.send_message(
        chat_id=chat_id,
        text=(
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/catalog - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ü–≤–µ—Ç–æ–≤\n"
            "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤\n"
            "/register - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ\n"
            "–ß—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–∫–∞–∑–∞—Ç—å' –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."
        )
    )

# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def register_user(update: Update, context: CallbackContext, from_callback=False) -> None:
    telegram_user = update.callback_query.from_user if from_callback else update.message.from_user
    chat_id = update.callback_query.message.chat_id if from_callback else update.message.chat_id

    user, created = await sync_to_async(User.objects.get_or_create)(username=telegram_user.username)

    if created:
        await context.bot.send_message(chat_id=chat_id,
                                       text="–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑—ã.")
    else:
        await context.bot.send_message(chat_id=chat_id,
                                       text="–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑—ã.")

def setup_bot():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_order, pattern='^order$')],
        states={
            SELECT_PRODUCT: [CallbackQueryHandler(handle_product_selection, pattern='^product_')],
            SELECT_QUANTITY: [
                CallbackQueryHandler(handle_quantity_selection, pattern='^quantity_'),
                CallbackQueryHandler(handle_custom_quantity, pattern='^custom_quantity$')
            ],
            ASKING_CUSTOM_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_custom_quantity)],
            ASKING_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_address_input)],
            ORDER_CONFIRMATION: [
                CallbackQueryHandler(confirm_order, pattern='^confirm_order$'),
                CallbackQueryHandler(cancel_order, pattern='^cancel_order$')
            ]
        },
        fallbacks=[CallbackQueryHandler(cancel_order, pattern='^cancel_order$')],
        per_chat=True  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å per_message –Ω–∞ per_chat
    )
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(button_handler))
    application.run_polling()

if __name__ == "__main__":
    setup_bot()
